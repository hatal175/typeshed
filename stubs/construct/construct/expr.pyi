from typing import Any, Callable, Dict, Optional

opnames: Dict[Callable, str]

class ExprMixin:
    def __add__(self, other: Any) -> BinExpr: ...
    def __sub__(self, other: Any) -> BinExpr: ...
    def __mul__(self, other: Any) -> BinExpr: ...
    def __floordiv__(self, other: Any) -> BinExpr: ...
    def __truediv__(self, other: Any) -> BinExpr: ...
    def __div__(self, other: Any) -> BinExpr: ...
    def __mod__(self, other: Any) -> BinExpr: ...
    def __pow__(self, other: Any) -> BinExpr: ...
    def __xor__(self, other: Any) -> BinExpr: ...
    def __rshift__(self, other: Any) -> BinExpr: ...
    def __lshift__(self, other: Any) -> BinExpr: ...
    def __and__(self, other: Any) -> BinExpr: ...
    def __or__(self, other: Any) -> BinExpr: ...
    def __radd__(self, other: Any) -> BinExpr: ...
    def __rsub__(self, other: Any) -> BinExpr: ...
    def __rmul__(self, other: Any) -> BinExpr: ...
    def __rfloordiv__(self, other: Any) -> BinExpr: ...
    def __rtruediv__(self, other: Any) -> BinExpr: ...
    def __rdiv__(self, other: Any) -> BinExpr: ...
    def __rmod__(self, other: Any) -> BinExpr: ...
    def __rpow__(self, other: Any) -> BinExpr: ...
    def __rxor__(self, other: Any) -> BinExpr: ...
    def __rrshift__(self, other: Any) -> BinExpr: ...
    def __rlshift__(self, other: Any) -> BinExpr: ...
    def __rand__(self, other: Any) -> BinExpr: ...
    def __ror__(self, other: Any) -> BinExpr: ...
    def __neg__(self) -> UniExpr: ...
    def __pos__(self) -> UniExpr: ...
    def __invert__(self) -> UniExpr: ...
    def __inv__(self) -> UniExpr: ...
    def __contains__(self, other: Any) -> BinExpr: ...
    def __gt__(self, other: Any) -> BinExpr: ...
    def __ge__(self, other: Any) -> BinExpr: ...
    def __lt__(self, other: Any) -> BinExpr: ...
    def __le__(self, other: Any) -> BinExpr: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class UniExpr(ExprMixin):
    op: Callable = ...
    operand: ExprMixin = ...
    def __init__(self, op: Callable, operand: ExprMixin) -> None: ...
    def __call__(self, obj: Any, *args: Any) -> Any: ...

class BinExpr(ExprMixin):
    op: Callable = ...
    lhs: ExprMixin = ...
    rhs: ExprMixin = ...
    def __init__(self, op: Callable, lhs: ExprMixin, rhs: ExprMixin) -> None: ...
    def __call__(self, obj: Any, *args: Any) -> Any: ...

class Path(ExprMixin):
    def __init__(self, name: str, field: Optional[str] = ..., parent: Optional[ExprMixin] = ...) -> None: ...
    def __call__(self, obj: Any, *args: Any) -> Any: ...
    def __getfield__(self) -> Optional[str]: ...
    def __getattr__(self, name: Any) -> Path: ...
    def __getitem__(self, name: Any) -> Path: ...

class Path2(ExprMixin):
    def __init__(self, name: str, index: Optional[Any] = ..., parent: Optional[Any] = ...) -> None: ...
    def __call__(self, *args: Any) -> Any: ...
    def __getitem__(self, index: Any) -> Path2: ...

class FuncPath(ExprMixin):
    def __init__(self, func: Callable, operand: Optional[Callable] = ...) -> None: ...
    def __call__(self, operand: Any, *args: Any) -> Any: ...

this: Path
obj_: Path
list_: Path2
len_: FuncPath
sum_: FuncPath
min_: FuncPath
max_: FuncPath
abs_: FuncPath

from typing import BinaryIO, Callable, Optional

_BytesToBytesFunc = Callable[[bytes], bytes]

class RestreamedBytesIO:
    substream: BinaryIO = ...
    encoder: _BytesToBytesFunc = ...
    encoderunit: int = ...
    decoder: _BytesToBytesFunc = ...
    decoderunit: int = ...
    rbuffer: bytes = ...
    wbuffer: bytes = ...
    sincereadwritten: int = ...
    def __init__(self, substream: BinaryIO, decoder: _BytesToBytesFunc, decoderunit: int, encoder: _BytesToBytesFunc, encoderunit: int) -> None: ...
    def read(self, count: Optional[int] = ...) -> bytes: ...
    def write(self, data: bytes) -> int: ...
    def close(self) -> None: ...
    def seek(self, at: int, whence: int = ...) -> None: ...
    def seekable(self) -> bool: ...
    def tell(self) -> int: ...
    def tellable(self) -> bool: ...

class RebufferedBytesIO:
    substream: BinaryIO = ...
    offset: int = ...
    rwbuffer: bytes = ...
    moved: int = ...
    tailcutoff: Optional[int] = ...
    def __init__(self, substream: BinaryIO, tailcutoff: Optional[int] = ...) -> None: ...
    def read(self, count: Optional[int] = ...) -> bytes: ...
    def write(self, data: bytes) -> int: ...
    def seek(self, at: int, whence: int = ...) -> int: ...
    def seekable(self) -> bool: ...
    def tell(self) -> int: ...
    def tellable(self) -> bool: ...
    def cachedfrom(self) -> int: ...
    def cachedto(self) -> int: ...

import collections
from _typeshed import _KT, _VT
from typing import Any, Callable, Dict, Generic, Iterable, List, Mapping, Optional, Tuple, TypeVar, Union

from construct.lib.py3compat import *

globalPrintFullStrings: bool
globalPrintFalseFlags: bool
globalPrintPrivateEntries: bool

_FuncT = TypeVar("_FuncT", bound=Callable)

def setGlobalPrintFullStrings(enabled: bool = ...) -> None: ...
def setGlobalPrintFalseFlags(enabled: bool = ...) -> None: ...
def setGlobalPrintPrivateEntries(enabled: bool = ...) -> None: ...
def recursion_lock(retval: str = ..., lock_name: str = ...) -> Callable[[_FuncT], _FuncT]: ...

class Container(collections.OrderedDict[_KT, _VT], Generic[_KT, _VT]):
    def __getattr__(self, name: Any) -> _VT: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __delattr__(self, name: Any) -> None: ...
    def update(self, seqordict: Union[Mapping[_KT,VT], Iterable[Tuple[_KT,_VT]]]): ... #type: ignore
    def copy(self) -> Container[_KT, _VT]: ...
    def __dir__(self) -> List[str]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def search(self, pattern: str) -> Optional[_VT]: ...
    def search_all(self, pattern: str) -> List[_VT]: ...

class ListContainer(List[_VT], Generic[_VT]):
    def search(self, pattern: str) -> Optional[_VT]: ...
    def search_all(self, pattern: str) -> List[_VT]: ...

import logging
from typing import Any, DefaultDict, Iterable, Iterator, List, Tuple, Union

from . import pytree as pytree
from .btm_utils import reduce_tree as reduce_tree
from .fixer_base import BaseFix

class BMNode:
    count: Iterator[int] = ...
    transition_table: Any = ...
    fixers: Any = ...
    id: int = ...
    content: str = ...
    def __init__(self) -> None: ...

class BottomMatcher:
    match: Any = ...
    root: BMNode = ...
    nodes: List[BMNode] = ...
    fixers: List[BaseFix] = ...
    logger: logging.Logger = ...
    def __init__(self) -> None: ...
    def add_fixer(self, fixer: Any) -> None: ...
    def add(self, pattern: List[Union[Tuple[str], str]], start: BMNode) -> List[BMNode]: ...
    def run(self, leaves: Iterable[pytree._NL]) -> DefaultDict[BaseFix, List[pytree._NL]]: ...
    def print_ac(self) -> None: ...

def type_repr(type_num: int) -> Union[str, int]: ...

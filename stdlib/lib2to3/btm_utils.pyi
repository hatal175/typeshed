from typing import Any, Callable, Iterator, List, Optional, Union

from . import pytree as pytree
from .pgen2 import grammar as grammar, token as token
from .pygram import pattern_symbols as pattern_symbols, python_symbols as python_symbols

syms = pattern_symbols
pysyms = python_symbols
tokens = grammar.opmap
token_labels = token
TYPE_ANY: int
TYPE_ALTERNATIVES: int
TYPE_GROUP: int

class MinNode:
    type: Optional[int] = ...
    name: Optional[str] = ...
    children: List[MinNode] = ...
    leaf: bool = ...
    parent: Optional[MinNode] = ...
    alternatives: List[List[Any]] = ...
    group: List[List[Any]] = ...
    def __init__(self, type: Optional[int] = ..., name: Optional[str] = ...) -> None: ...
    def leaf_to_root(self) -> Optional[List[Any]]: ...
    def get_linear_subpattern(self) -> Optional[List[Any]]: ...
    def leaves(self) -> Iterator[MinNode]: ...

def reduce_tree(node: pytree._NL, parent: Optional[pytree._NL] = ...) -> Optional[MinNode]: ...
def get_characteristic_subpattern(subpatterns: Any) -> Any: ...
def rec_test(sequence: Any, test_func: Callable[[Any], bool]) -> Iterator[bool]: ...
